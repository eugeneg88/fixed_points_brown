#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Mar  7 08:33:18 2024

@author: evgeni
"""


import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import itertools
import multiprocessing # create a process pool that uses all cpus
import rebound
from matplotlib.patches import Rectangle
import matplotlib

## useful functions 

# eccentricity at the fixed point (Eq. 19)
def ecc_fixed(jz, eps):
    y= 9*eps*jz/8
    x2 = np.fabs(jz) * (5 / 3 * (1+y)/(1-y))**0.5 
    e2 = 1 - x2
    if e2<0:
        return 0
    return e2**0.5

# associated inclination (Eq. 20)
def inc_fixed(jz, eps):
    cos_inc_val = jz/(1-ecc_fixed(jz,eps)**2)**0.5 
    return np.arccos(cos_inc_val)*180/np.pi

# The Hamiltonian of the systesm - Quadrupole + Brown, Eq. 2 and 10.
def Hamiltonian(ecc, omega, j_z, eps_sa):
    G = (1-ecc**2)**0.5
    
    # the first term - Eq. 2
    sec_term =   6*G**2 - 3*j_z**2 + 15*(1-G**2 - j_z**2/G**2 + j_z**2)*np.sin(omega)**2

    # the second term, Eq. 10, also in Luo+2016
    Brown_term =  (-8+5*np.sin(omega)**2)*G**2 + 5 * np.sin(omega)**2 * (j_z**2/G**2 - 1 - j_z**2)
    return sec_term - 27 * j_z * eps_sa / 8 * Brown_term

#plot energy levels, both specific contours and 2d colorbar
# the separatrix is in red
# the fixed point is in blue
def plot_energy_levels(eps, inc_deg, labelx=False, labely=False, adjust=False, extra=False, H_custom=5, omega=90):
    if np.sin(omega*np.pi/180)>0:
        x_min, x_max = 0, 2*np.pi #range
        cmap='viridis'
    if np.sin(omega*np.pi/180)<0:
        x_min, x_max = np.pi, 2*np.pi #range 
        cmap='plasma'
        
    H = np.cos(inc_deg*np.pi/180)
    G_min, G_max = H, 1
    e_min, e_max = 0, (1-G_min**2)**0.5

    num_points = 300
    x_vals = np.linspace(x_min, x_max, num_points)
    e_vals = np.linspace(e_min, e_max, num_points) 
    G_vals = np.linspace(G_min, G_max, num_points) 

    x_grid, G_grid = np.meshgrid(x_vals, G_vals)
    x_grid, e_grid = np.meshgrid(x_vals, e_vals)

# Calculate the Hamiltonian values at each point on the grid
    H_values = Hamiltonian(e_grid, x_grid, H, eps)
# Plot the phase space
    # p - benchmark for energy levels
    p = 0.2 + 0.7*ecc_fixed(H,eps)
#   full 2D plot
    plt.contourf(x_grid/np.pi, e_grid, H_values, 50, cmap=cmap)
#  plot individual lines
    plt.contour(x_grid/np.pi, e_grid, H_values, cmap='copper', levels=np.linspace(np.min(H_values)*p+np.max(H_values)*(1-p) ,np.max(H_values)+0.01,21))
#   plot separatrix
    plt.contour(x_grid/np.pi, e_grid, H_values, colors='r',   linestyles='solid', levels=[Hamiltonian(0.001,0,H, eps)], linewidths=3)
# any extra custom contours
    plt.contour(x_grid/np.pi, e_grid, H_values, colors='navy',   linestyles='solid', levels=[H_custom], linewidths=2.5)

#plot fixed point
    if np.sin(omega*np.pi/180)>0:
        plt.scatter(1/2, ecc_fixed(H,eps), color='b')
    if np.sin(omega*np.pi/180)<0:
        plt.scatter(3/2, ecc_fixed(H,eps), color='b')

    if labelx:
        plt.xlabel(r'$\omega / \pi$')
    if labely:
        plt.ylabel('eccentricity')
    if adjust:
        plt.subplots_adjust(left=0.08, bottom=0.08, right=0.97, top=0.88, wspace=0.16, hspace=0.18)

#plotting figures 1 and 2 - no N-body yet!
def plot_fig_1():
    plt.figure(figsize=(18,10))
    plt.subplot(231)
    plot_energy_levels(eps=0., inc_deg=30, labely=True)
    plt.subplot(232)
    plot_energy_levels(eps=0., inc_deg=45)
    plt.subplot(233)
    plot_energy_levels(eps=0., inc_deg=60)
    plt.subplot(234)
    plot_energy_levels(eps=0.2, inc_deg=30, labely=True, labelx=True)
    plt.subplot(235)
    plot_energy_levels(eps=0.2, inc_deg=45, labelx=True)
    plt.subplot(236)
    plot_energy_levels(eps=0.2, inc_deg=60, labelx=True)

    plt.subplots_adjust(left=0.05, bottom=0.08, right=0.97, top=0.95, wspace=0.2, hspace=0.18)

def plot_fig_2():
    plt.figure(figsize=(18,10))
    plt.subplot(231)
    plot_energy_levels(eps=0., inc_deg=120, labely=True)
    plt.subplot(232)
    plot_energy_levels(eps=0., inc_deg=135)
    plt.subplot(233)
    plot_energy_levels(eps=0., inc_deg=150)
    plt.subplot(234)
    plot_energy_levels(eps=0.2, inc_deg=120, labely=True, labelx=True)
    plt.subplot(235)
    plot_energy_levels(eps=0.2, inc_deg=135, labelx=True)
    plt.subplot(236)
    plot_energy_levels(eps=0.2, inc_deg=150, labelx=True)

    plt.subplots_adjust(left=0.12, bottom=0.08, right=0.95, top=0.95, wspace=0.2, hspace=0.18)

def plot_fig_3_panel(j_z):
# assugn colors - seems to be working...
    col  = ['gray', 'lightcoral', 'maroon', 'teal', 'navy', 'navy', 'darkgreen', 'gray', 'pink', 'teal', 'maroon', 'navy',  'salmon', 'black' ]
    n = int(15.5 * np.fabs(j_z))#random.randint(0, len(col) - 1)  
    eps_lin=np.linspace(-0.0,0.3,100)
    plt.subplot(121)
    plt.plot(eps_lin, [ecc_fixed(j_z, x) for x in eps_lin], linewidth=3, color=col[n], label=r'$j_z = $' + str(j_z))
    plt.plot(eps_lin, [ecc_fixed(-j_z, x) for x in eps_lin], linewidth=3, linestyle = 'dashed', color = col[n])

    plt.xlabel(r'$\epsilon_{\rm SA}$')
    plt.ylabel(r'$e_{\rm fix}$')
    plt.legend(loc=4, fontsize=18)

    plt.subplot(122)
    plt.plot(eps_lin, [(inc_fixed(j_z, x) ) for x in eps_lin], linewidth=3, color=col[n], label=r'$j_z = $' + str(j_z))
    plt.plot(eps_lin, [180 - (inc_fixed(-j_z, x)) for x in eps_lin], linewidth=3, linestyle = 'dashed', color = col[n])

    plt.xlabel(r'$\epsilon_{\rm SA}$')
    plt.ylabel(r'$\iota_{\rm fix}$' + ' [deg]')
    plt.subplots_adjust(left=0.08, bottom=0.12, right=0.95, top=0.95, wspace=0.18, hspace=0.18)

def plot_fig_3():
    plt.figure(figsize=(12.5,6))

    plot_fig_3_panel(0.2)
    plot_fig_3_panel(0.5)
    plot_fig_3_panel(0.7)
    plot_fig_3_panel(0.75)
    plot_fig_3_panel(0.8)
    plot_fig_3_panel(0.85)

#auxillary functions get a1 from epsilon and vise versa
def get_a1(eps, m1, m2, m3, a2, e2):
    k = (m3**2 / (m1+m2) * (m1+m2+m3) )
    b2 = a2 * (1-e2**2)**0.5   
    return k**(-1/3) * b2 * eps**(2/3)

def get_eps(m2,m3,a1,a2,e2):
    b2 = a2 * (1-e2**2)**0.5
    return (a1/b2)**1.5 * m3 / m2 **0.5 / (m2+m3)**0.5

#%%
def load_data():
    import requests
    from bs4 import BeautifulSoup

    # URL of the page with the data
    url = "https://ssd.jpl.nasa.gov/sats/elem/#refs"

    # Send a GET request to the URL
    response = requests.get(url)

    # Check if the request was successful (status code 200)
    if response.status_code == 200:
        # Parse the HTML content of the page
        soup = BeautifulSoup(response.content, "html.parser")
    
        # Find the table containing the data
        table = soup.find("table")
    
        # Extract data from the table
        data = []
        for row in table.find_all("tr"):
            cells = row.find_all("td")
            if len(cells) > 0:
                data.append([cell.text.strip() for cell in cells])

        # Print the data
        for row in data:
            print(row)
        else:
            print("Failed to retrieve data from the website")
    
    sat_id = [float(data[x][0]) for x in range(0,len(data))]
    planet_name = [(data[x][1]) for x in range(0,len(data))]
    sat_name = [(data[x][2]) for x in range(0,len(data))]
    sat_code = [(data[x][3]) for x in range(0,len(data))]
    sat_a = [float(data[x][7]) for x in range(0,len(data))]
    sat_e = [float(data[x][8]) for x in range(0,len(data))]
    sat_omega = [float(data[x][9]) for x in range(0,len(data))]
    sat_mean = [float(data[x][10]) for x in range(0,len(data))]
    sat_inc = [float(data[x][11]) for x in range(0,len(data))]
    sat_node = [float(data[x][12]) for x in range(0,len(data))]

    return sat_id, planet_name, sat_name, sat_code, sat_a, sat_e, sat_omega, sat_mean, sat_inc, sat_node

sat_id, planet_name, sat_name, sat_code, sat_a, sat_e, sat_omega, sat_mean, sat_inc, sat_node = load_data()
#%%
def run_one_body2(j):
    import rebound
    import bottleneck as bn
    sim = rebound.Simulation()
    sim.units = ('AU', 'years', 'Msun')
    sim.add("Sun")
    sim.add(sat_code[j][0]+'99', hash=planet_name[j])
    sim.add(sat_code[j])

## rotate to a frame where the planet is coplanar

    sim.move_to_com()
    ps = sim.particles

    # get the planetary orbit
    orbp = ps[1].calculate_orbit(ps[0])        
 
    rot = rebound.Rotation.orbit(Omega=orbp.Omega, inc=orbp.inc, omega=orbp.omega)
    #transform the particles to the invariable plane - inverse transformation
    ps[0].rotate(rot.inverse())
    ps[1].rotate(rot.inverse())
    ps[2].rotate(rot.inverse())
    # calculate new orbital elements
    orbp = ps[1].calculate_orbit(ps[0])    
    orbs = ps[2].calculate_orbit(primary=ps[1])
    # get the dimensionless quantities
    eps = get_eps(ps[1].m, ps[0].m, orbs.a, orbp.a, orbp.e)
    jz = (1 - orbs.e**2)**0.5 * np.cos(orbs.inc)
# Set the integrator
    sim.integrator = "ias15"  
# Integrate the system for a certain number nn of secular timescales
    P = sim.particles[1].calculate_orbit(primary=sim.particles[0]).P
    nn=3
    times = np.linspace(0, nn*P/eps, 10000)
#orbital elements of the planet and satellite
    args_p = np.zeros(len(times))
    args_s = np.zeros(len(times))
    nodes_p = np.zeros(len(times))
    nodes_s = np.zeros(len(times))

    ecc_p = np.zeros(len(times))
    ecc_s = np.zeros(len(times))
    inc_s = np.zeros(len(times))
    H = np.zeros(len(times))
    a_s = np.zeros(len(times))

    for i, t in enumerate(times):
        sim.integrate(t)
        orbp = ps[1].calculate_orbit(ps[0])    
        orbs = ps[2].calculate_orbit(primary=ps[1])
        
        args_p[i] = orbp.omega  # Argument of pericentre of the planet
        args_s[i] = orbs.omega  # Argument of pericentre of the satellite
        nodes_p[i] = orbp.Omega  # Argument of pericentre of the planet
    #    print(orbs.inc, np.cos(orbs.inc), (1 - orbs.e**2)**0.5 * np.cos(orbs.inc))
        nodes_s[i] =orbs.Omega# (1 - orbs.e**2)**0.5 * np.cos(orbs.inc) ##orbs.Omega  # Argument of pericentre of the satellite
        ecc_p[i] = orbp.e  # Argument of pericentre of the planet
        ecc_s[i] = orbs.e
        inc_s[i] = orbs.inc *  180/ np.pi
        H[i] = Hamiltonian(orbs.e, orbs.omega, jz, eps)
        a_s[i] = orbs.a
 
    # averaged energy
    if True:
        H_ave=np.average(H)
 # start plotting
        plt.figure(figsize=(14, 6))
        plt.subplot(231)

        plt.plot(times, [x/np.pi for x in args_s])
        plt.ylabel(r'$\omega_1 /\pi$')
        plt.tick_params(
            axis='x',          # changes apply to the x-axis
            which='both',      # both major and minor ticks are affected
            bottom=False,      # ticks along the bottom edge are off
            top=False,         # ticks along the top edge are off
            labelbottom=False) # labels along the bottom edge are off
       
        plt.subplot(233)
        plt.text(-1.8*(nn*P/eps), 1.2,  sat_name[j] +': ' +r'$\epsilon_{\rm SA}=$'+ "%.3f" % eps +', '+ '\quad' +r'$j_{\rm z}=$' + "%.3f" % jz, fontsize=32)
        plt.plot(times, [x/np.pi for x in nodes_s])
        plt.ylabel(r'$\Omega_1/\pi$')
        plt.tick_params(
            axis='x',          # changes apply to the x-axis
            which='both',      # both major and minor ticks are affected
            bottom=False,      # ticks along the bottom edge are off
            top=False,         # ticks along the top edge are off
            labelbottom=False) # labels along the bottom edge are off

        plt.subplot(232) 
        plt.plot(times, ecc_s)
        plt.ylabel(r'$e_1$')
        plt.tick_params(
           axis='x',          # changes apply to the x-axis
           which='both',      # both major and minor ticks are affected
           bottom=False,      # ticks along the bottom edge are off
           top=False,         # ticks along the top edge are off
           labelbottom=False) # labels along the bottom edge are off
        
        plt.subplot(234)
        plt.plot(times, inc_s)
        plt.ylabel(r'$\iota\ \rm [deg]$')
        plt.xlabel(r'$\rm time\ [yr]$')
        
        plt.subplot(235)
        plt.xlabel(r'$\rm time\ [yr]$')
        plt.plot(times, H, alpha=0.4)
        H_sep=Hamiltonian(0.001,0,jz, eps)
        djz = [3/8/2 * eps * (5*e**2 * (np.cos(o)**2  + np.sin(o)**2 * jz**2/(1 - e**2)) + (1 - e**2) - jz**2) for (e,o) in zip(ecc_s, args_s)]
        H2_plus = [Hamiltonian(e,o,jz + jj, eps) for (jj,e,o) in zip(djz, ecc_s, args_s)]
        H2_minus = [Hamiltonian(e,o,jz - jj, eps) for (jj,e,o) in zip(djz, ecc_s, args_s)]
 
        # construct the energy envelopes
        ww=int(10000/nn*eps)
        H2_plus = bn.move_mean(H2_plus, window=ww, min_count = int(ww/2))
        H2_minus = bn.move_mean(H2_minus, window=ww, min_count = int(ww/2))
        H2_plus = [x for x in H2_plus if not np.isnan(x)]
        H2_minus = [x for x in H2_minus if not np.isnan(x)]
        
        plt.axhline(y=H_sep, color="red", linestyle="--", linewidth=3)
        plt.axhline(y=H_ave, color="navy", linestyle="--", linewidth=3)
        plt.plot(times[:len(H2_plus)], H2_plus, color='salmon', linestyle='solid', linewidth=3, alpha=0.9)
        plt.plot(times[:len(H2_minus)], H2_minus, color='salmon', linestyle='solid', linewidth=3, alpha=0.9)
        plt.ylabel(r'$\hat{E}$')
        
        plt.subplot(236)
        plot_energy_levels(eps, np.arccos(jz) * 180 / np.pi, extra=False, H_custom=np.average(H), omega=args_s[0]*180/np.pi, adjust=False)
        plt.scatter(args_s/np.pi, ecc_s, color='grey', alpha=0.1)
        plt.scatter(args_s[0]/np.pi, ecc_s[0], color='purple', alpha=1)
        sign = np.sign(np.sin(args_s[0]))
        plt.xlim([ (-sign+1 )/2, (-sign+1)/2 + 1])
        plt.xlabel(r'$\omega_1 / \pi$')
        plt.ylabel(r'$e_1$')

        plt.subplots_adjust(left=0.06, bottom=0.12, right=0.98, top=0.92, wspace=0.25, hspace=0.)

 #%%
#%%
def E_over_de(eps, jz):
    e0 = ecc_fixed(jz,eps)
    Hf = Hamiltonian(e0, np.pi/2,jz,eps)
    Hs = Hamiltonian(1e-3, 0,jz,eps)
    o = np.pi/2
    djz = 3/8/2 * eps * (5*e0**2 * (np.cos(o)**2  + np.sin(o)**2 * jz**2/(1 - e0**2)) + (1 - e0**2) - jz**2) 
    C = (5/3)**0.5 * 9 / 8 
    decc = C * eps*e0* ((1-e0**2)**0.5 - e0**2/2 * C * eps)

    H2_plus = Hamiltonian(e0 + eps/8 + 1*decc, o,jz + 0*djz, eps)
    H2_minus = Hamiltonian(e0 - eps/8 + 1*decc, o,jz - 0*djz, eps)
#    H2_plus = Hamiltonian(e0 , o,jz + djz, eps)
 #   H2_minus = Hamiltonian(e0 , o,jz - djz, eps)

    minH = min(H2_plus, H2_minus)
    k=0.*np.sign(jz)#-0*np.sign(jz)*3* (eps**2 ) * e0**2
    
    k2=0
    qq = 1 - k2*eps - Hs/Hf
      
    return ((k-1)*Hs + minH)/(Hf - Hs), qq#(dEp - Hs)/1, (dEm - Hs)/1

#%%
def run_one_body(eps, jz):
    import rebound
    import bottleneck as bn
    
    sim = rebound.Simulation()
    sim.units = ('AU', 'years', 'Msun')
    sim.add("Sun")
    planet_mass = 1/1079
    a2=1
    sim.add(m=planet_mass, a=a2)
    e_0 = ecc_fixed(jz, eps)
    inc_0 = inc_fixed(jz, eps) * np.pi / 180 # in radians
    omega_deg=90
    mean = 0
    a1 = get_a1(eps, 1e-12, planet_mass, 1, a2, 0)
  #  print(inc_0 * 180 / np.pi, e_0, np.cos(inc_0) * (1-e_0**2)**0.5)
    sim.add(m=1e-12, a=a1, e=e_0, inc=inc_0, Omega=np.pi / 180  *45, omega= np.pi / 180  *omega_deg, M=np.pi / 180  *mean, primary=sim.particles[1])
#evgeni 23.03 - added for rotations
    sim.move_to_com()

    ps = sim.particles

    Omega_rot = ps[1].calculate_orbit().Omega
    inc_rot = ps[1].calculate_orbit().inc
    omega_rot = ps[1].calculate_orbit().omega

    rot = rebound.Rotation.orbit(Omega = Omega_rot, inc = inc_rot, omega = omega_rot)

    ps[0] = rot.inverse() * ps[0]
    ps[1] = rot.inverse() * ps[1]
    ps[2] = rot.inverse() * ps[2]

# Set the integrator
    sim.integrator = "ias15"  
# Integrate the system for a certain number of years
    nn=5
    P = sim.particles[1].calculate_orbit(primary=sim.particles[0]).P
    times = np.linspace(0, nn*P/eps, 10000)
    args_p = np.zeros(len(times))
    args_s = np.zeros(len(times))
    nodes_p = np.zeros(len(times))
    nodes_s = np.zeros(len(times))

    ecc_p = np.zeros(len(times))
    ecc_s = np.zeros(len(times))
    inc_p =np.zeros(len(times))
    inc_s = np.zeros(len(times))
    H = np.zeros(len(times))
    a_s = np.zeros(len(times))
    mean_jup = np.zeros(len(times))
    inc_mut = np.zeros(len(times))

    for i, t in enumerate(times):
        sim.integrate(t)
        orbp = ps[1].calculate_orbit(ps[0])    
        orbs = ps[2].calculate_orbit(primary=ps[1])
        
        args_p[i] = orbp.omega  # Argument of pericentre of the planet
        args_s[i] = orbs.omega  # Argument of pericentre of the satellite
        nodes_p[i] = orbp.Omega  # Argument of pericentre of the planet
    #    print(orbs.inc, np.cos(orbs.inc), (1 - orbs.e**2)**0.5 * np.cos(orbs.inc))
        nodes_s[i] =orbs.Omega# (1 - orbs.e**2)**0.5 * np.cos(orbs.inc) ##orbs.Omega  # Argument of pericentre of the satellite
        ecc_p[i] = orbp.e  # Argument of pericentre of the planet
        ecc_s[i] = orbs.e
        inc_s[i] = orbs.inc *  180/ np.pi
        H[i] = Hamiltonian(orbs.e, orbs.omega, jz, eps)
        a_s[i] = orbs.a
    
    if True:
        plt.title(r'$\epsilon_{\rm SA}=$' + str(eps) + '\quad' +r'$j_{\rm z}=$' + "%.2f" % jz)
        plot_energy_levels(eps, np.arccos(jz) * 180 / np.pi, extra=False, H_custom=np.average(H), omega=args_s[0]*180/np.pi, adjust=False)
        plt.scatter(args_s/np.pi, ecc_s, color='grey', alpha=0.1)
        plt.scatter(args_s[0]/np.pi, ecc_s[0], color='purple', alpha=1)
        sign = np.sign(np.sin(args_s[0]))
        plt.xlim([ (-sign+1 )/2, (-sign+1)/2 + 1])
        plt.xlabel(r'$\omega_1 / \pi$')
        plt.ylabel(r'$e_1$')

        plt.subplots_adjust(left=0.06, bottom=0.12, right=0.98, top=0.92, wspace=0.25, hspace=0.)
#%%
def plot_fig_4():
    plt.figure(figsize=(15, 10))
    plt.subplot(221)
    plt.ylabel('eccentricity')
    run_one_body(0.055, 0.71)
    plt.subplot(223)
    plt.ylabel('eccentricity')
    plt.xlabel(r'$\omega / \pi$')
    run_one_body(0.06, 0.71)
    plt.subplot(222)
    plt.subplot(224)
    run_one_body(0.161, 0.5)
    plt.xlabel(r'$\omega / \pi$')
    plt.subplots_adjust(left=0.06, bottom=0.07, right=0.98, top=0.95, wspace=0.13, hspace=0.18)

def plot_fig_5():
    plt.figure(figsize=(18, 10))
    plt.subplot(231)
    run_one_body(0.1, -0.71)
    plt.ylabel('eccentricity')
    plt.subplot(232)
    run_one_body(0.16, -0.77)
    plt.subplot(233)
    run_one_body(0.09, -0.798)
    plt.subplot(234)
    run_one_body(0.15, -0.71)
    plt.ylabel('eccentricity')
    plt.xlabel(r'$\omega / \pi$')
    plt.subplot(235)
    run_one_body(0.168, -0.77)
    plt.xlabel(r'$\omega / \pi$')
    plt.subplot(236)
    run_one_body(0.093, -0.798)
    plt.xlabel(r'$\omega / \pi$')
    plt.subplots_adjust(left=0.05, bottom=0.08, right=0.98, top=0.94, wspace=0.2, hspace=0.18)

#%%

